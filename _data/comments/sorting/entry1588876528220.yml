_id: 85e9a140-9091-11ea-9170-4181cea7519a
_parent: 'https://travisdowns.github.io/blog/2019/05/22/sorting.html'
replying_to_uid: c02de000-8d30-11ea-9db0-e9d644cafe33
message: "> Very interesting article !!! You seem to suggest that qsort is indeed weak in performance because of the iterative call of the compare function. If I understood the paper well, this function could be inlined, but itâ€™s not!! You also suggest that the C++ standard sort is better than C qsort.\r\n\r\nYes, more or less. Essentially, the C sort comparator function cannot be inlined, since the C sort is implemented in a separate translation unit (C file) and compiled once and it lives in your libc shared object. So the comparator, which is called many times in the hottest part of the sort, is necessarily a function call, which adds overhead in various ways: especially because the comprands are passed by pointer so end up being loaded multiple times rather than passed in registers.\r\n\r\nOn the other hand, C++ std::sort, by its very template nature is implemented in a header and so gets specialized for every type and every comparator function. This generally makes it faster, but also bloats code size. So it is not a pure win-win, but something of a tradeoff.\r\n\r\n\r\n> What would be nice would be to publish a better qsort than the one we find in stdlib.\r\n\r\nWell I do plan to publish some usable radix sorts when this is done, but I don't think is is very obvious how to write a C qsort that improves significantly on the existing qsort. In relation to the inlining aspect, you could do is a qsort implementation that is implemented in a header in C, just like C++ and rely on the optimizer to inline the comparator function. This isn't totally straightforward, as [described in a footnote](https://travisdowns.github.io/blog/2019/05/22/sorting.html#fn:inline-hard) but I'm sure it could be done.\r\n\r\nThis comes with all the code bloat problems of the C++ version, however.\r\n\r\nIn any case, I don't have specific plans to try to improve on that aspect of qsort: I'm mostly interested in improving radix sort."
name: Travis Downs
email: c6937532928911c0dae3c9c89b658c09
hp: ''
date: 1588876528
